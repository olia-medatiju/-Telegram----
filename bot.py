import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.client.default import DefaultBotProperties
import config
import os
import json
from datetime import datetime

bot = Bot(token=config.BOT_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()

SUBSCRIBERS_FILE = "subscribers.json"

def load_subscribers():
    if not os.path.exists(SUBSCRIBERS_FILE):
        return {}
    with open(SUBSCRIBERS_FILE, "r", encoding="utf-8") as f:
        return json.load(f)

def save_subscribers(subscribers):
    with open(SUBSCRIBERS_FILE, "w", encoding="utf-8") as f:
        json.dump(subscribers, f, ensure_ascii=False, indent=2)  

buttons = [
    [KeyboardButton(text="–ö–∞–∫ —Å—Ç–∞—Ç—å –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–º?")],
    [KeyboardButton(text="–ì–¥–µ –º—ã –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö?")],
    [KeyboardButton(text="–ë–ª–∏–∂–∞–π—à–∏–µ —Å–æ–±—ã—Ç–∏—è")],
    [KeyboardButton(text="–ö–∞–∫ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ —á–∞—Å—ã?")],
    [KeyboardButton(text="–ß—Ç–æ —Ç–∞–∫–æ–µ –≤–æ–ª–æ–Ω—Ç—ë—Ä—Å–∫–∏–π —Å–ª—ë—Ç?")],
    [KeyboardButton(text="–ö–∞–∫ —Å –Ω–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è?")],
    [KeyboardButton(text="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É")],
    [KeyboardButton(text="–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏")]
]
kb = ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

inline_kb = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="–°–∞–π—Ç", url="https://example.com")],
    [InlineKeyboardButton(text="Telegram", url="https://example.com")],
    [InlineKeyboardButton(text="VK", url="https://example.com")],
    [InlineKeyboardButton(text="OK", url="https://example.com")],
    [InlineKeyboardButton(text="–ì—Ä—É–ø–ø–∞ –≤–æ–ª–æ–Ω—Ç—ë—Ä–æ–≤", url="https://example.com")]
])

@dp.message(Command("start"))
async def start(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –≤–æ–ª–æ–Ω—Ç—ë—Ä—Å–∫–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?",
        reply_markup=kb
    )

@dp.message(lambda m: m.text == "–ö–∞–∫ —Å—Ç–∞—Ç—å –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–º?")
async def how_to_volunteer(message: types.Message):
    await message.answer(
        "<b>–ö–∞–∫ —Å—Ç–∞—Ç—å –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–º:</b>\n\n"
        "1. –°–≤—è–∂–∏—Å—å —Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞–º–∏.\n"
        "2. –ü—Ä–æ–π–¥–∏ –æ–±—É—á–∞—é—â–∏–π —Ç—Ä–µ–Ω–∏–Ω–≥.\n"
        "3. –£—á–∞—Å—Ç–≤—É–π –≤ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö!\n\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å ‚ù§Ô∏è"
    )

@dp.message(lambda m: m.text == "–ì–¥–µ –º—ã –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö?")
async def socials(message: types.Message):
    await message.answer(
        "<b>–ù–∞—à–∏ —Å–æ—Ü—Å–µ—Ç–∏:</b>\n\n"
        "üîó <a href='https://example.com'>VK</a>\n"
        "üîó <a href='https://example.com'>Telegram</a>\n"
        "üîó <a href='https://example.com'>–û–ö</a>\n"
        "üîó <a href='https://example.com'>–°–∞–π—Ç</a>\n",
        reply_markup=inline_kb
    )

@dp.message(lambda m: m.text == "–ë–ª–∏–∂–∞–π—à–∏–µ —Å–æ–±—ã—Ç–∏—è")
async def events(message: types.Message):
    try:
        path = os.path.join(os.path.dirname(__file__), "events.txt")
        with open(path, "r", encoding="utf-8") as f:
            content = f.read().strip()
        if content:
            await message.answer(f"<b>–ë–ª–∏–∂–∞–π—à–∏–µ —Å–æ–±—ã—Ç–∏—è:</b>\n\n{content}")
        else:
            await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π.")
    except FileNotFoundError:
        await message.answer("–§–∞–π–ª —Å —Å–æ–±—ã—Ç–∏—è–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")

@dp.message(lambda m: m.text == "–ö–∞–∫ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ —á–∞—Å—ã?")
async def submit_hours(message: types.Message):
    await message.answer(
        "<b>–ö–∞–∫ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É:</b>\n\n"
        "1. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ.\n"
        "2. –ù–∞–π–¥–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ.\n"
        "3. –ü–æ–¥–∞–π –∑–∞—è–≤–∫—É –∏ –∂–¥–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."
    )

@dp.message(lambda m: m.text == "–ß—Ç–æ —Ç–∞–∫–æ–µ –≤–æ–ª–æ–Ω—Ç—ë—Ä—Å–∫–∏–π —Å–ª—ë—Ç?")
async def meeting(message: types.Message):
    await message.answer(
        "<b>–í–æ–ª–æ–Ω—Ç—ë—Ä—Å–∫–∏–π —Å–ª—ë—Ç</b> ‚Äî —ç—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –¥–ª—è –æ–±–º–µ–Ω–∞ –æ–ø—ã—Ç–æ–º, –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–æ–≤ –∏ —Å–æ–≤–º–µ—Å—Ç–Ω–æ–≥–æ –æ—Ç–¥—ã—Ö–∞!"
    )

@dp.message(lambda m: m.text == "–ö–∞–∫ —Å –Ω–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è?")
async def contact(message: types.Message):
    await message.answer(
        "<b>–ö–æ–Ω—Ç–∞–∫—Ç—ã:</b>\n\n"
        "üì± –°–æ—Ü—Å–µ—Ç–∏ ‚Äî <a href='https://example.com'>–ì—Ä—É–ø–ø–∞ –í–ö</a>"
    )

@dp.message(lambda m: m.text == "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É")
async def subscribe(message: types.Message):
    subscribers = load_subscribers()
    uid = str(message.from_user.id)
    if uid not in subscribers:
        subscribers[uid] = {
            "name": message.from_user.full_name,
            "status": "subscribed",
            "joined": datetime.now().strftime("%Y-%m-%d %H:%M")
        }
        save_subscribers(subscribers)
        await message.answer("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!")
    else:
        subscribers[uid]["status"] = "subscribed"
        save_subscribers(subscribers)
        await message.answer("–ü–æ–¥–ø–∏—Å–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")

@dp.message(lambda m: m.text == "–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏")
async def unsubscribe(message: types.Message):
    subscribers = load_subscribers()
    uid = str(message.from_user.id)
    if uid in subscribers and subscribers[uid]["status"] == "subscribed":
        subscribers[uid]["status"] = "unsubscribed"
        save_subscribers(subscribers)
        await message.answer("‚ùå –¢—ã –æ—Ç–ø–∏—Å–∞–Ω.")
    else:
        await message.answer("–¢—ã –Ω–µ –±—ã–ª –ø–æ–¥–ø–∏—Å–∞–Ω.")

@dp.message(Command("broadcast"))
async def broadcast(message: types.Message):
    if message.from_user.id != config.ADMIN_ID:
        await message.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    text = message.text[len("/broadcast "):].strip()
    if not text:
        await message.answer("–î–æ–±–∞–≤—å —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.")
        return

    subscribers = load_subscribers()
    success, fail = 0, 0

    for uid, data in subscribers.items():
        if data.get("status") == "subscribed":
            try:
                await bot.send_message(uid, f"üì¢ <b>–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:</b>\n\n{text}")
                success += 1
            except:
                fail += 1

    await message.answer(f"–ì–æ—Ç–æ–≤–æ.\n‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success}\n‚ùå –û—à–∏–±–æ–∫: {fail}")

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
